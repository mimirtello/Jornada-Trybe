Exerc√≠cio 1:

Fa√ßa uma requisi√ß√£o ao site https://httpbin.org/encoding/utf8 e exiba seu conte√∫do de forma leg√≠vel.

------------------------

import requests


response = requests.get("https://httpbin.org/encoding/utf8")
print(response.text)

============================

Exerc√≠cio 2:
Fa√ßa uma requisi√ß√£o ao recurso usu√°rios da API do Github (https://api.github.com/users), exibindo o username e url de todos os usu√°rios retornados.

------------------------

import requests

response = requests.get("https://api.github.com/users")
users = response.json()
for user in users:
    print(f"{user['login']} {user['url']}")

============================

Exerc√≠cio 3:
√Äs vezes, voc√™ precisa fazer com que o seu raspador da Web pare√ßa estar fazendo solicita√ß√µes HTTP como o navegador, para que o servidor retorne os mesmos dados que voc√™ v√™ no seu navegador. Fa√ßa uma requisi√ß√£o a https://scrapethissite.com/pages/advanced/?gotcha=headers e verifique se foi bem sucedida.

Para verificar se a requisi√ß√£o foi bem sucedida, fa√ßa assert "bot detected" not in response.text. Se nada acontecer, seu c√≥digo est√° funcionando. Fa√ßa a inspe√ß√£o de como a requisi√ß√£o √© feita pelo navegador para conseguir replicar atrav√©s do c√≥digo.

------------------------

import requests


response = requests.get(
    "https://scrapethissite.com/pages/advanced/?gotcha=headers",
    headers={"User-agent": "Mozilla", "Accept": "text/html"},
)
assert "bot detected" not in response.text

============================

 üöÄ Exerc√≠cio 4:
Baseando-se em uma p√°gina contendo detalhes sobre um livro (http://books.toscrape.com/catalogue/the-grand-design_405/index.html), fa√ßa a extra√ß√£o dos campos t√≠tulo, pre√ßo, descri√ß√£o e url contendo a imagem de capa do livro.

O pre√ßo deve vir somente valores num√©ricos e ponto. Ex: √Ç¬£13.76 -> 13.76. A descri√ß√£o de ter o sufixo ‚Äúmore‚Ä¶‚Äù removido quando existir. ‚ö†Ô∏è Os campos extra√≠dos devem ser apresentados separados por v√≠rgula. Ex: t√≠tulo,pre√ßo,descri√ß√£o,capa.
------------------------

import requests
import parsel

URL_BASE = "http://books.toscrape.com/catalogue/"
response = requests.get(URL_BASE + "the-grand-design_405/index.html")
selector = parsel.Selector(response.text)

title = selector.css("h1::text").get()

price = selector.css(".product_main > .price_color::text").re_first(r"\d*\.\d{2}")

description = selector.css("#product_description ~ p::text").get()
suffix = "...more"
if description.endswith(suffix):
    description = description[:-len(suffix)]

cover = URL_BASE + selector.css("#product_gallery img::attr(src)").get()

print(title, price, description, cover, sep=",")

============================

üöÄ Exerc√≠cio 5:
Modifique o exerc√≠cio anterior para retornar tamb√©m quantos livros est√£o dispon√≠veis, apresentando como √∫ltimo campo no retorno.

------------------------

import requests
import parsel

URL_BASE = "http://books.toscrape.com/catalogue/"
response = requests.get(URL_BASE + "the-grand-design_405/index.html")
selector = parsel.Selector(response.text)

title = selector.css("h1::text").get()

price = selector.css(".product_main > .price_color::text").re_first(r"\d*\.\d{2}")

description = selector.css("#product_description ~ p::text").get()
suffix = "...more"
if description.endswith(suffix):
    description = description[:-len(suffix)]

cover = URL_BASE + selector.css("#product_gallery img::attr(src)").get()
availability = selector.css(".product_main .availability::text").re_first("\d")

print(title, price, description, cover, availability, sep=",")

============================

Exerc√≠cio 6:
Escreva um programa que se conecte ao banco de dados library e liste os livros da cole√ß√£o books para uma determinada categoria recebida por uma pessoa usu√°ria. Somente o t√≠tulo dos livros deve ser exibido.

------------------------

from pymongo import MongoClient


category = input("Escolha uma categoria: ")
with MongoClient() as client:
    db = client.library
    for book in db.books.find({"categories": category}, projection=["title"]):
        print(book["title"])

============================

Fa√ßa o c√°lculo de quantos livros publicados (STATUS = PUBLISH) temos em nosso banco de dados por categoria. Ordene-os de forma decrescente de acordo com a quantidade.

Voc√™ pode utilizar agreggation framework para auxiliar neste exerc√≠cio.

------------------------

from pymongo import MongoClient


with MongoClient() as client:
    db = client.library
    pipelines = [
        {"$match": {"status": "PUBLISH"}},
        {"$unwind": "$categories"},
        {"$group": {"_id": "$categories", "count": {"$sum": 1}}},
        {"$sort": {"count": -1}}
    ]
    for category in db.books.aggregate(pipelines):
        print(category["_id"], category["count"], sep=": ")

